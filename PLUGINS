# Writing rawdog plugins

## Introduction

As provided, rawdog provides a fairly small set of features. In order to
make it do more complex jobs, rawdog can be extended using plugin
modules written in Python. This document is intended for developers who
want to extend rawdog by writing plugins.

Extensions work by registering hook functions which are called by
various bits of rawdog's core as it runs. These functions can modify
rawdog's internal state in various interesting ways. An arbitrary number
of functions can be attached to each hook; they are called in the order
they were attached. Hook functions take various arguments depending on
where they're called from, and returns a boolean value indicating
whether further functions attached to the same hook should be called.

The "plugindirs" config option gives a list of directories to search for
plugins; all Python modules found in those directories will be loaded by
rawdog. In practice, this means that you need to call your file
something ending in ".py" to have it recognised as a plugin.

## Hooks

Most hook functions are called with "rawdog" and "config" as their first
two arguments; these are references to the aggregator's Rawdog and
Config objects.

If you need a hook that doesn't currently exist, please contact me.

The following hooks are supported:

### startup(rawdog, config)

Run when rawdog starts up, after the state file and config file have
been loaded, but before rawdog starts processing command-line arguments.

### shutdown(rawdog, config)

Run just before rawdog saves the state file and exits.

### config_option(config, name, value)

* name: the option name
* value: the option value

Called when rawdog encounters a config file option that it doesn't
recognise. The rawdoglib.rawdog.parse_* functions will probably be
useful when dealing with config options. You can raise ValueError to
have rawdog print an appropriate error message.  You should return False
from this hook if name is an option you recognise.

Note that using config.log in this hook will probably not do what you
want, because the verbose flag may not yet have been turned on.

### output_filter(rawdog, config, articles)

* articles: the mutable list of Article objects

Called before rawdog sorts the list of articles to write. This hook can
be used to remove articles that shouldn't be written.

### output_sort(rawdog, config, articles)

* articles: the mutable list of Article objects

Called after rawdog has sorted the list of articles to write. This hook
can be used to reorder (or completely resort) the list of articles to
write.

### output_write(rawdog, config, articles)

* articles: the mutable list of Article objects

Called just before rawdog starts writing the HTML output. This hook can
be used to implement alternative output methods.

### output_items_begin(rawdog, config, f)

* f: a writable file object (__items__)

Called before rawdog starts expanding the items template. This set of
hooks can be used to implement alternative date (or other section)
headings.

### output_items_heading(rawdog, config, f, article, date)

* f: a writable file object (__items__)
* article: the Article object about to be written
* date: the Article's date for sorting purposes

Called before each item is written.

### output_items_end(rawdog, config, f)

* f: a writable file object (__items__)

Called after all items are written.

